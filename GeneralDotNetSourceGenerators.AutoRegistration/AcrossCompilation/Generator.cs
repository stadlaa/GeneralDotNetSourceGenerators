using System.Collections.Generic;
using System.Linq;
using System.Text;
using GeneralDotNetSourceGenerators.Shared.Helpers;
using Microsoft.CodeAnalysis;

namespace GeneralDotNetSourceGenerators.AutoRegistration.AcrossCompilation;

[Generator]
public class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        string registryAttributeFullName = "GeneralDotNetSourceGenerators.Abstractions.AutoRegistration.AcrossCompilation.IsRegistry";
        string registrantAttributeFullName = "GeneralDotNetSourceGenerators.Abstractions.AutoRegistration.AcrossCompilation.IsRegistrantToAttribute";
        string interfaceFullName = "GeneralDotNetSourceGenerators.Abstractions.AutoRegistration.AcrossCompilation.IRegistrant";

        context.RegisterSourceOutput(
            context.CompilationProvider,
            (spc, compilation) =>
            {
                var registryAttributeSymbol = compilation.GetTypeByMetadataName(registryAttributeFullName);
                var registrantAttributeSymbol = compilation.GetTypeByMetadataName(registrantAttributeFullName);
                var iRegistrantSymbol = compilation.GetTypeByMetadataName(interfaceFullName);
                if (registryAttributeSymbol == null || iRegistrantSymbol == null || registrantAttributeSymbol == null)
                    return;

                var allTypes = new List<INamedTypeSymbol>();
                CollectAllTypes(compilation.GlobalNamespace, allTypes);

                // Find all registry types (marked with the attribute)
                var registryTypes = new HashSet<INamedTypeSymbol>(SymbolEqualityComparer.Default);
                foreach (var symbol in allTypes)
                {
                    foreach (var attr in symbol.GetAttributes())
                    {
                        if (SymbolEqualityComparer.Default.Equals(attr.AttributeClass, registryAttributeSymbol))
                        {
                            registryTypes.Add(symbol);
                            break;
                        }
                    }
                }

                // Find all registrant types (implementing registrant interface + having registrant attribute)
                var registrantTypes = allTypes
                    .Where(t => t.AllInterfaces.Any(i => SymbolEqualityComparer.Default.Equals(i, iRegistrantSymbol))
                        && t.GetAttributes().Any(attr => SymbolEqualityComparer.Default.Equals(attr.AttributeClass, registrantAttributeSymbol)))
                    .ToList();

                // For each registry, find registrants whose RegistryType property matches the registry type
                foreach (var registryType in registryTypes)
                {
                    var matchingRegistrants = new List<INamedTypeSymbol>();

                    foreach (var registrant in registrantTypes)
                    {
                        // Add matching registrants based on the attribute's constructor type argument
                        foreach (var attr in registrant.GetAttributes())
                        {
                            if (SymbolEqualityComparer.Default.Equals(attr.AttributeClass, registrantAttributeSymbol)
                                && attr.ConstructorArguments.Length == 1
                                && attr.ConstructorArguments[0].Value is INamedTypeSymbol registryTypeArg
                                && SymbolEqualityComparer.Default.Equals(registryTypeArg, registryType))
                            {
                                matchingRegistrants.Add(registrant);
                            }
                        }
                    }

                    var sb = new StringBuilder($$"""
                        // <auto-generated/>
                        namespace {{registryType.ContainingNamespace.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat).Replace("global::","")}};
                        
                        {{DeclarationHelper.GetModifiers(registryType)}} {{DeclarationHelper.GetTypeKind(registryType.TypeKind)}} {{registryType.Name}}
                        {
                            static {{registryType.Name}}()
                            {
                        """);

                    foreach (var registrant in matchingRegistrants)
                    {
                        sb.AppendLine($"        {registrant.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}.Register();");
                    }

                    sb.AppendLine("""
                            }
                        }
                        """);

                    spc.AddSource(HintNameHelper.UniqueHintNamePerType(registryType), sb.ToString());
                }
            });
    }

    // Recursively collect all named types (classes, etc.) in the compilation, including generated ones
    private static void CollectAllTypes(INamespaceSymbol ns, List<INamedTypeSymbol> types)
    {
        foreach (var member in ns.GetTypeMembers())
        {
            types.Add(member);
            // Recursively collect nested types
            CollectNestedTypes(member, types);
        }
        foreach (var nestedNs in ns.GetNamespaceMembers())
        {
            CollectAllTypes(nestedNs, types);
        }
    }

    private static void CollectNestedTypes(INamedTypeSymbol type, List<INamedTypeSymbol> types)
    {
        foreach (var nested in type.GetTypeMembers())
        {
            types.Add(nested);
            CollectNestedTypes(nested, types);
        }
    }
}